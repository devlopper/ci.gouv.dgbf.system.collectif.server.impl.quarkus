CREATE OR REPLACE PROCEDURE PA_CREER_VM_DEPENSE AUTHID CURRENT_USER AS ocount NUMBER;
BEGIN
	--EXCEPTION WHEN OTHERS THEN  dbms_output.put_line('Error while dropping VMA_DEPENSE : '||SQLERRM); 
	-- We will create a temporary table to avoid application to fail in case there is something going wrong
    SELECT COUNT(*) INTO ocount FROM all_tables WHERE table_name = 'VMA_DEPENSE_TEMP';
    IF ocount = 1 THEN
        EXECUTE IMMEDIATE  'DROP TABLE VMA_DEPENSE_TEMP CASCADE CONSTRAINTS PURGE';
        dbms_output.put_line('Table VMA_DEPENSE_TEMP has been dropped'); 
    END IF;

    EXECUTE IMMEDIATE 'CREATE TABLE VMA_DEPENSE_TEMP AS SELECT d.* FROM va_depense d';
    dbms_output.put_line('Temporary table VMA_DEPENSE_TEMP has been created'); 
    
    SELECT COUNT(*) INTO ocount FROM all_tables WHERE table_name = 'VMA_DEPENSE';
    IF ocount = 1 THEN
        EXECUTE IMMEDIATE  'DROP TABLE VMA_DEPENSE CASCADE CONSTRAINTS PURGE';
        dbms_output.put_line('Table VMA_DEPENSE has been dropped'); 
    END IF;
    
    EXECUTE IMMEDIATE 'RENAME VMA_DEPENSE_TEMP TO VMA_DEPENSE';
    dbms_output.put_line('Temporary table VMA_DEPENSE_TEMP has been renamed to VMA_DEPENSE'); 

	EXECUTE IMMEDIATE 'ALTER TABLE VMA_DEPENSE ADD CONSTRAINT VMA_DEPENSE_PK PRIMARY KEY (IDENTIFIANT)';
	EXECUTE IMMEDIATE 'CREATE INDEX VMA_DEPENSE_K_EXERCICE ON VMA_DEPENSE (EXERCICE ASC)';
	EXECUTE IMMEDIATE 'CREATE INDEX VMA_DEPENSE_K_V_COLLECTIF ON VMA_DEPENSE (VERSION_COLLECTIF ASC)';
	EXECUTE IMMEDIATE 'CREATE INDEX VMA_DEPENSE_K_ACTIVITE ON VMA_DEPENSE (ACTIVITE_IDENTIFIANT ASC)';
	EXECUTE IMMEDIATE 'CREATE INDEX VMA_DEPENSE_K_ACTIVITE_CODE ON VMA_DEPENSE (ACTIVITE_CODE ASC)';
	EXECUTE IMMEDIATE 'CREATE INDEX VMA_DEPENSE_K_ACTIVITE_COD_LIB ON VMA_DEPENSE (ACTIVITE_CODE_LIBELLE ASC)';
	EXECUTE IMMEDIATE 'CREATE INDEX VMA_DEPENSE_K_NE ON VMA_DEPENSE (NATURE_ECONOMIQUE_IDENTIFIANT ASC)';
	EXECUTE IMMEDIATE 'CREATE INDEX VMA_DEPENSE_K_NE_CODE ON VMA_DEPENSE (NATURE_ECONOMIQUE_CODE ASC)';
	EXECUTE IMMEDIATE 'CREATE INDEX VMA_DEPENSE_K_NE_COD_LIB ON VMA_DEPENSE (NATURE_ECONOMIQUE_CODE_LIBELLE ASC)';
	EXECUTE IMMEDIATE 'CREATE INDEX VMA_DEPENSE_K_SF ON VMA_DEPENSE (SOURCE_FINANCEMENT_IDENTIFIANT ASC)';
	EXECUTE IMMEDIATE 'CREATE INDEX VMA_DEPENSE_K_SF_CODE ON VMA_DEPENSE (SOURCE_FINANCEMENT_CODE ASC)';
	EXECUTE IMMEDIATE 'CREATE INDEX VMA_DEPENSE_K_SF_COD_LIB ON VMA_DEPENSE (SF_CODE_LIBELLE ASC)';
	EXECUTE IMMEDIATE 'CREATE INDEX VMA_DEPENSE_K_BAILLEUR ON VMA_DEPENSE (BAILLEUR_IDENTIFIANT ASC)';
	EXECUTE IMMEDIATE 'CREATE INDEX VMA_DEPENSE_K_BAILLEUR_CODE ON VMA_DEPENSE (BAILLEUR_CODE ASC)';
	EXECUTE IMMEDIATE 'CREATE INDEX VMA_DEPENSE_K_BAILLEUR_COD_LIB ON VMA_DEPENSE (BAILLEUR_CODE_LIBELLE ASC)';
	EXECUTE IMMEDIATE 'CREATE INDEX VMA_DEPENSE_K_ND ON VMA_DEPENSE (NATURE_DEPENSE_IDENTIFIANT ASC)';
	EXECUTE IMMEDIATE 'CREATE INDEX VMA_DEPENSE_K_ND_CODE ON VMA_DEPENSE (NATURE_DEPENSE_CODE ASC)';
	EXECUTE IMMEDIATE 'CREATE INDEX VMA_DEPENSE_K_ND_COD_LIB ON VMA_DEPENSE (NATURE_DEPENSE_CODE_LIBELLE ASC)';
	EXECUTE IMMEDIATE 'CREATE INDEX VMA_DEPENSE_K_ACTION ON VMA_DEPENSE (ACTION_IDENTIFIANT ASC)';
	EXECUTE IMMEDIATE 'CREATE INDEX VMA_DEPENSE_K_ACTION_CODE ON VMA_DEPENSE (ACTION_CODE ASC)';
	EXECUTE IMMEDIATE 'CREATE INDEX VMA_DEPENSE_K_ACTION_COD_LIB ON VMA_DEPENSE (ACTION_CODE_LIBELLE ASC)';
	EXECUTE IMMEDIATE 'CREATE INDEX VMA_DEPENSE_K_USB ON VMA_DEPENSE (USB_IDENTIFIANT ASC)';
	EXECUTE IMMEDIATE 'CREATE INDEX VMA_DEPENSE_K_USB_CODE ON VMA_DEPENSE (USB_CODE ASC)';
	EXECUTE IMMEDIATE 'CREATE INDEX VMA_DEPENSE_K_USB_COD_LIB ON VMA_DEPENSE (USB_CODE_LIBELLE ASC)';
	EXECUTE IMMEDIATE 'CREATE INDEX VMA_DEPENSE_K_SECTION ON VMA_DEPENSE (SECTION_IDENTIFIANT ASC)';
	EXECUTE IMMEDIATE 'CREATE INDEX VMA_DEPENSE_K_SECTION_CODE ON VMA_DEPENSE (SECTION_CODE ASC)';
	EXECUTE IMMEDIATE 'CREATE INDEX VMA_DEPENSE_K_SECTION_COD_LIB ON VMA_DEPENSE (SECTION_CODE_LIBELLE ASC)';
    dbms_output.put_line('Indexes have been created'); 
	
    /* Compile depend objects */
	EXECUTE IMMEDIATE 'ALTER VIEW VA_DEPENSE_IMPORTEE COMPILE';
    EXECUTE IMMEDIATE 'ALTER VIEW VA_DEPENSE_IMPORTABLE COMPILE';
    EXECUTE IMMEDIATE 'ALTER VIEW VA_DEPENSE_MOUVEMENT_INCLUS COMPILE';
    dbms_output.put_line('Dependents objects have been compiled'); 
END;

CREATE OR REPLACE PROCEDURE PA_ACTUALISER_VM_DEPENSE AUTHID CURRENT_USER AS ocount NUMBER;
BEGIN
	SELECT COUNT(*) INTO ocount FROM all_tables WHERE table_name = 'VMA_DEPENSE';
    IF ocount = 0 THEN
        PA_CREER_VM_DEPENSE();
    ELSE
    	EXECUTE IMMEDIATE '
    	MERGE INTO VMA_DEPENSE d USING VA_DEPENSE v ON (d.identifiant = v.identifiant)
		WHEN MATCHED THEN UPDATE SET d.ACTION_CODE=v.ACTION_CODE,
		d.ACTION_CODE_LIBELLE=v.ACTION_CODE_LIBELLE,
		d.ACTION_IDENTIFIANT=v.ACTION_IDENTIFIANT,
		d.ACTIVITE_CODE=v.ACTIVITE_CODE,
		d.ACTIVITE_CODE_LIBELLE=v.ACTIVITE_CODE_LIBELLE,
		d.ACTIVITE_IDENTIFIANT=v.ACTIVITE_IDENTIFIANT,
		d.BAILLEUR_CODE=v.BAILLEUR_CODE,
		d.BAILLEUR_CODE_LIBELLE=v.BAILLEUR_CODE_LIBELLE,
		d.BAILLEUR_IDENTIFIANT=v.BAILLEUR_IDENTIFIANT,
		d.BUDGET_ACTUEL_AE=v.BUDGET_ACTUEL_AE,
		d.BUDGET_ACTUEL_CP=v.BUDGET_ACTUEL_CP,
		d.BUDGET_INITIAL_AE=v.BUDGET_INITIAL_AE,
		d.BUDGET_INITIAL_CP=v.BUDGET_INITIAL_CP,
		d.CATEGORIE_BUDGET_CODE=v.CATEGORIE_BUDGET_CODE,
		d.CATEGORIE_BUDGET_CODE_LIBELLE=v.CATEGORIE_BUDGET_CODE_LIBELLE,
		d.CATEGORIE_BUDGET_IDENTIFIANT=v.CATEGORIE_BUDGET_IDENTIFIANT,
		d.CATEGORIE_BUDGET_LIBELLE=v.CATEGORIE_BUDGET_LIBELLE,
		d.EXERCICE=v.EXERCICE,
		d.FIND_ID=v.FIND_ID,
		d.LDEP_ID=v.LDEP_ID,
		d.MOUVEMENT_AE=v.MOUVEMENT_AE,
		d.MOUVEMENT_CP=v.MOUVEMENT_CP,
		d.NATURE_DEPENSE_CODE=v.NATURE_DEPENSE_CODE,
		d.NATURE_DEPENSE_CODE_LIBELLE=v.NATURE_DEPENSE_CODE_LIBELLE,
		d.NATURE_DEPENSE_IDENTIFIANT=v.NATURE_DEPENSE_IDENTIFIANT,
		d.NATURE_ECONOMIQUE_CODE=v.NATURE_ECONOMIQUE_CODE,
		d.NATURE_ECONOMIQUE_CODE_LIBELLE=v.NATURE_ECONOMIQUE_CODE_LIBELLE,
		d.NATURE_ECONOMIQUE_IDENTIFIANT=v.NATURE_ECONOMIQUE_IDENTIFIANT,
		d.SECTION_CODE=v.SECTION_CODE,
		d.SECTION_CODE_LIBELLE=v.SECTION_CODE_LIBELLE,
		d.SECTION_IDENTIFIANT=v.SECTION_IDENTIFIANT,
		d.SF_CODE_LIBELLE=v.SF_CODE_LIBELLE,
		d.SOURCE_FINANCEMENT_CODE=v.SOURCE_FINANCEMENT_CODE,
		d.SOURCE_FINANCEMENT_IDENTIFIANT=v.SOURCE_FINANCEMENT_IDENTIFIANT,
		d.USB_CODE=v.USB_CODE,
		d.USB_CODE_LIBELLE=v.USB_CODE_LIBELLE,
		d.USB_IDENTIFIANT=v.USB_IDENTIFIANT,
		d.VERSION_COLLECTIF=v.VERSION_COLLECTIF
		WHEN NOT MATCHED THEN INSERT
		(IDENTIFIANT,ACTION_CODE,ACTION_CODE_LIBELLE,ACTION_IDENTIFIANT,
		ACTIVITE_CODE,ACTIVITE_CODE_LIBELLE,ACTIVITE_IDENTIFIANT,
		BAILLEUR_CODE,BAILLEUR_CODE_LIBELLE,BAILLEUR_IDENTIFIANT,
		BUDGET_ACTUEL_AE,BUDGET_ACTUEL_CP,
		BUDGET_INITIAL_AE,BUDGET_INITIAL_CP,
		CATEGORIE_BUDGET_CODE,CATEGORIE_BUDGET_CODE_LIBELLE,CATEGORIE_BUDGET_IDENTIFIANT,CATEGORIE_BUDGET_LIBELLE,
		EXERCICE,FIND_ID,LDEP_ID,
		MOUVEMENT_AE,MOUVEMENT_CP,
		NATURE_DEPENSE_CODE,NATURE_DEPENSE_CODE_LIBELLE,NATURE_DEPENSE_IDENTIFIANT,
		NATURE_ECONOMIQUE_CODE,NATURE_ECONOMIQUE_CODE_LIBELLE,NATURE_ECONOMIQUE_IDENTIFIANT,
		SECTION_CODE,SECTION_CODE_LIBELLE,SECTION_IDENTIFIANT,
		SF_CODE_LIBELLE,SOURCE_FINANCEMENT_CODE,SOURCE_FINANCEMENT_IDENTIFIANT,
		USB_CODE,USB_CODE_LIBELLE,USB_IDENTIFIANT,VERSION_COLLECTIF)
		VALUES 
		(v.IDENTIFIANT,v.ACTION_CODE,v.ACTION_CODE_LIBELLE,v.ACTION_IDENTIFIANT,
		v.ACTIVITE_CODE,v.ACTIVITE_CODE_LIBELLE,v.ACTIVITE_IDENTIFIANT,
		v.BAILLEUR_CODE,v.BAILLEUR_CODE_LIBELLE,v.BAILLEUR_IDENTIFIANT,
		v.BUDGET_ACTUEL_AE,v.BUDGET_ACTUEL_CP,v.BUDGET_INITIAL_AE,v.BUDGET_INITIAL_CP,
		v.CATEGORIE_BUDGET_CODE,v.CATEGORIE_BUDGET_CODE_LIBELLE,v.CATEGORIE_BUDGET_IDENTIFIANT,v.CATEGORIE_BUDGET_LIBELLE,
		v.EXERCICE,
		v.FIND_ID,v.LDEP_ID,v.MOUVEMENT_AE,v.MOUVEMENT_CP,
		v.NATURE_DEPENSE_CODE,v.NATURE_DEPENSE_CODE_LIBELLE,v.NATURE_DEPENSE_IDENTIFIANT,
		v.NATURE_ECONOMIQUE_CODE,v.NATURE_ECONOMIQUE_CODE_LIBELLE,v.NATURE_ECONOMIQUE_IDENTIFIANT,
		v.SECTION_CODE,v.SECTION_CODE_LIBELLE,v.SECTION_IDENTIFIANT,
		v.SF_CODE_LIBELLE,v.SOURCE_FINANCEMENT_CODE,v.SOURCE_FINANCEMENT_IDENTIFIANT,
		v.USB_CODE,v.USB_CODE_LIBELLE,v.USB_IDENTIFIANT,
		v.VERSION_COLLECTIF)
		';
    	dbms_output.put_line('Table VMA_DEPENSE has been updated');
    END IF;
END;

CREATE OR REPLACE PROCEDURE PA_CREER_VM_RESSOURCE AUTHID CURRENT_USER AS ocount NUMBER;
BEGIN
    -- We will create a temporary table to avoid application to fail in case there is something going wrong
    SELECT COUNT(*) INTO ocount FROM all_tables WHERE table_name = 'VMA_RESSOURCE_TEMP';
    IF ocount = 1 THEN
        EXECUTE IMMEDIATE  'DROP TABLE VMA_RESSOURCE_TEMP CASCADE CONSTRAINTS PURGE';
        dbms_output.put_line('Table VMA_RESSOURCE_TEMP has been dropped'); 
    END IF;
    
	--EXCEPTION WHEN OTHERS THEN  dbms_output.put_line('Error while dropping VMA_RESSOURCE : '||SQLERRM); 
	EXECUTE IMMEDIATE 'CREATE TABLE VMA_RESSOURCE_TEMP AS
	SELECT version_collectif.identifiant||r.activite_code||r.nature_economique_code AS "IDENTIFIANT",version_collectif.identifiant AS "VERSION_COLLECTIF",r.*
	FROM UT_BIDF_TAMP.va_ressource@dblink_elabo_bidf r
	JOIN VMA_EXERCICE exercice ON exercice.annee = r.exercice
	JOIN TA_COLLECTIF collectif ON collectif.exercice = exercice.identifiant
	JOIN TA_VERSION_COLLECTIF version_collectif ON version_collectif.collectif = collectif.identifiant';
    dbms_output.put_line('Temporary table VMA_RESSOURCE_TEMP has been created'); 
    
    SELECT COUNT(*) INTO ocount FROM all_tables WHERE table_name = 'VMA_RESSOURCE';
    IF ocount = 1 THEN
        EXECUTE IMMEDIATE  'DROP TABLE VMA_RESSOURCE CASCADE CONSTRAINTS PURGE';
        dbms_output.put_line('Table VMA_RESSOURCE has been dropped'); 
    END IF;
    
    EXECUTE IMMEDIATE 'RENAME VMA_RESSOURCE_TEMP TO VMA_RESSOURCE';
    dbms_output.put_line('Temporary table VMA_RESSOURCE_TEMP has been renamed to VMA_RESSOURCE'); 
    
	EXECUTE IMMEDIATE 'ALTER TABLE VMA_RESSOURCE ADD CONSTRAINT VMA_RESSOURCE_PK PRIMARY KEY (IDENTIFIANT)';
	EXECUTE IMMEDIATE 'CREATE INDEX VMA_RESSOURCE_K_EXERCICE ON VMA_RESSOURCE (EXERCICE ASC)';
	EXECUTE IMMEDIATE 'CREATE INDEX VMA_RESSOURCE_K_ACTIVITE ON VMA_RESSOURCE (ACTIVITE_IDENTIFIANT ASC)';
	EXECUTE IMMEDIATE 'CREATE INDEX VMA_RESSOURCE_K_NE ON VMA_RESSOURCE (NATURE_ECONOMIQUE_IDENTIFIANT ASC)';
	EXECUTE IMMEDIATE 'CREATE INDEX VMA_RESSOURCE_K_USB ON VMA_RESSOURCE (USB_IDENTIFIANT ASC)';
	EXECUTE IMMEDIATE 'CREATE INDEX VMA_RESSOURCE_K_SECTION ON VMA_RESSOURCE (SECTION_IDENTIFIANT ASC)';
	dbms_output.put_line('Indexes have been created'); 
    
	/* Compile depend objects */
	EXECUTE IMMEDIATE 'ALTER VIEW VA_RESSOURCE_IMPORTEE COMPILE';
    EXECUTE IMMEDIATE 'ALTER VIEW VA_RESSOURCE_IMPORTABLE COMPILE';
     dbms_output.put_line('Dependents objects have been compiled'); 
END;

CREATE OR REPLACE PROCEDURE PA_ACTUALISER_VM_RESSOURCE AUTHID CURRENT_USER AS ocount NUMBER;
BEGIN
	SELECT COUNT(*) INTO ocount FROM all_tables WHERE table_name = 'VMA_RESSOURCE';
    IF ocount = 0 THEN
        PA_CREER_VM_RESSOURCE();
    ELSE
    	EXECUTE IMMEDIATE '
    	MERGE INTO VMA_RESSOURCE r USING VA_RESSOURCE v ON (r.identifiant = v.identifiant)
        WHEN MATCHED THEN UPDATE SET 
        r.ACTIVITE_CODE=v.ACTIVITE_CODE,r.ACTIVITE_CODE_LIBELLE=v.ACTIVITE_CODE_LIBELLE,r.ACTIVITE_IDENTIFIANT=v.ACTIVITE_IDENTIFIANT,
        r.BUDGET_ACTUEL=v.BUDGET_ACTUEL,r.BUDGET_INITIAL=v.BUDGET_INITIAL,
        r.EXERCICE=v.EXERCICE,r.MOUVEMENT=v.MOUVEMENT,
        r.NATURE_ECONOMIQUE_CODE=v.NATURE_ECONOMIQUE_CODE,r.NATURE_ECONOMIQUE_CODE_LIBELLE=v.NATURE_ECONOMIQUE_CODE_LIBELLE,r.NATURE_ECONOMIQUE_IDENTIFIANT=v.NATURE_ECONOMIQUE_IDENTIFIANT,
        r.REC_ID=v.REC_ID,
        r.SECTION_CODE=v.SECTION_CODE,r.SECTION_CODE_LIBELLE=v.SECTION_CODE_LIBELLE,r.SECTION_IDENTIFIANT=v.SECTION_IDENTIFIANT,
        r.USB_CODE=v.USB_CODE,r.USB_CODE_LIBELLE=v.USB_CODE_LIBELLE
        WHEN NOT MATCHED THEN INSERT
        (IDENTIFIANT,ACTIVITE_CODE,ACTIVITE_CODE_LIBELLE,ACTIVITE_IDENTIFIANT,
        BUDGET_ACTUEL,BUDGET_INITIAL,EXERCICE,MOUVEMENT,
        NATURE_ECONOMIQUE_CODE,NATURE_ECONOMIQUE_CODE_LIBELLE,NATURE_ECONOMIQUE_IDENTIFIANT,
        REC_ID,SECTION_CODE,SECTION_CODE_LIBELLE,SECTION_IDENTIFIANT,
        USB_CODE,USB_CODE_LIBELLE,USB_IDENTIFIANT,VERSION_COLLECTIF)
        VALUES 
        (v.IDENTIFIANT,v.ACTIVITE_CODE,v.ACTIVITE_CODE_LIBELLE,v.ACTIVITE_IDENTIFIANT,
        v.BUDGET_ACTUEL,v.BUDGET_INITIAL,v.EXERCICE,v.MOUVEMENT,
        v.NATURE_ECONOMIQUE_CODE,v.NATURE_ECONOMIQUE_CODE_LIBELLE,
        v.NATURE_ECONOMIQUE_IDENTIFIANT,v.REC_ID,v.SECTION_CODE,
        v.SECTION_CODE_LIBELLE,v.SECTION_IDENTIFIANT,v.USB_CODE,
        v.USB_CODE_LIBELLE,v.USB_IDENTIFIANT,v.VERSION_COLLECTIF)
		';
    	dbms_output.put_line('Table VMA_RESSOURCE has been updated');
    END IF;
END;

CREATE OR REPLACE PROCEDURE PA_ACTUALISER_VM(nom_table IN VARCHAR2) AUTHID CURRENT_USER AS
    uuid VARCHAR2(32);
BEGIN
	IF nom_table = 'VMA_DEPENSE' THEN
    	PA_ACTUALISER_VM_DEPENSE();
    ELSIF nom_table = 'VMA_RESSOURCE' THEN
    	PA_ACTUALISER_VM_RESSOURCE();
	END IF;
END;